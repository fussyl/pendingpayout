"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-explicit-any */
const registries_1 = require("../../test-helpers/registries");
const mock_1 = require("../test-helpers/mock");
const failParseResponse = require("../test-helpers/responses/transaction/submitFailParse.json");
const nodeRejectResponse = require("../test-helpers/responses/transaction/submitNodeReject.json");
const TransactionSubmitService_1 = require("./TransactionSubmitService");
const transactionSubmitService = new TransactionSubmitService_1.TransactionSubmitService(mock_1.mockApi);
describe('TransactionSubmitService', () => {
    describe('submitTransaction', () => {
        it('works with a valid a transaction', async () => {
            return expect(transactionSubmitService.submitTransaction(mock_1.balancesTransferValid)).resolves.toStrictEqual({
                hash: registries_1.polkadotRegistry.createType('Hash'),
            });
        });
        it('throws with "Failed to parse a transaction" when tx is not parsable', async () => {
            const err = new Error(
            // eslint-disable-next-line no-useless-escape
            `createType(ExtrinsicV4):: Struct: failed on 'signature':: Struct: cannot decode type Type with value \"0x250284d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d01022f4deae1532ddd0\"`);
            err.stack =
                'Error: createType(ExtrinsicV4):: Struct: failed ... this is a unit test mock';
            mock_1.mockApi.tx = () => {
                throw err;
            };
            await expect(transactionSubmitService.submitTransaction(mock_1.balancesTransferInvalid)).rejects.toStrictEqual(failParseResponse);
            mock_1.mockApi.tx = mock_1.tx;
        });
        it('throws with "Failed to submit transaction" when the node rejects the transaction', async () => {
            const err = new Error('1012: Transaction is temporarily banned');
            err.stack =
                'Error: 1012: Transaction is temporarily banned ... this is a unit test mock';
            mock_1.mockApi.rpc.author.submitExtrinsic = () => Promise.resolve().then(() => {
                throw err;
            });
            await expect(transactionSubmitService.submitTransaction(mock_1.balancesTransferValid)).rejects.toStrictEqual(nodeRejectResponse);
            mock_1.mockApi.rpc.author.submitExtrinsic = mock_1.submitExtrinsic;
        });
    });
});
//# sourceMappingURL=TransactionSubmitService.spec.js.map
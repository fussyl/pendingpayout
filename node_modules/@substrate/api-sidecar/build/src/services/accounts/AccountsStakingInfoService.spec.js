"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
const http_errors_1 = require("http-errors");
const sanitizeNumbers_1 = require("../../sanitize/sanitizeNumbers");
const registries_1 = require("../../test-helpers/registries");
const mock_1 = require("../test-helpers/mock");
const response789629 = require("../test-helpers/responses/accounts/stakingInfo789629.json");
const AccountsStakingInfoService_1 = require("./AccountsStakingInfoService");
const accountStakingInfoService = new AccountsStakingInfoService_1.AccountsStakingInfoService(mock_1.mockApi);
describe('AccountsStakingInfoService', () => {
    describe('fetchAccountStakingInfo', () => {
        it('works with a valid stash address (block 789629)', async () => {
            expect(sanitizeNumbers_1.sanitizeNumbers(await accountStakingInfoService.fetchAccountStakingInfo(mock_1.blockHash789629, mock_1.testAddress))).toStrictEqual(response789629);
        });
        it('throws a 400 when the given address is not a stash', async () => {
            mock_1.mockApi.query.staking.bonded.at = () => Promise.resolve().then(() => registries_1.polkadotRegistry.createType('Option<AccountId>', null));
            await expect(accountStakingInfoService.fetchAccountStakingInfo(mock_1.blockHash789629, 'NotStash')).rejects.toStrictEqual(new http_errors_1.BadRequest('The address NotStash is not a stash address.'));
            mock_1.mockApi.query.staking.bonded.at = mock_1.bondedAt;
        });
        it('throws a 404 when the staking ledger cannot be found', async () => {
            mock_1.mockApi.query.staking.ledger.at = () => Promise.resolve().then(() => registries_1.polkadotRegistry.createType('Option<StakingLedger>', null));
            await expect(accountStakingInfoService.fetchAccountStakingInfo(mock_1.blockHash789629, mock_1.testAddress)).rejects.toStrictEqual(new http_errors_1.InternalServerError(`Staking ledger could not be found for controller address "${mock_1.testAddressController.toString()}"`));
            mock_1.mockApi.query.staking.ledger.at = mock_1.ledgerAt;
        });
    });
});
//# sourceMappingURL=AccountsStakingInfoService.spec.js.map
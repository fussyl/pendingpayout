"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sanitizeNumbers_1 = require("../../sanitize/sanitizeNumbers");
const createCall_1 = require("../../test-helpers/createCall");
const registries_1 = require("../../test-helpers/registries");
const mock_1 = require("../test-helpers/mock");
const block789629 = require("../test-helpers/mock/data/block789629.json");
const blocks789629Response = require("../test-helpers/responses/blocks/blocks789629.json");
const BlocksService_1 = require("./BlocksService");
/**
 * BlockService mock
 */
const blocksService = new BlocksService_1.BlocksService(mock_1.mockApi);
describe('BlocksService', () => {
    describe('fetchBlock', () => {
        it('works when ApiPromise works (block 789629)', async () => {
            expect(sanitizeNumbers_1.sanitizeNumbers(await blocksService.fetchBlock(mock_1.blockHash789629, true, true))).toMatchObject(blocks789629Response);
        });
        it('throws when an extrinsic is undefined', async () => {
            // Create a block with undefined as the first extrinisic and the last extrinsic removed
            const mockBlock789629BadExt = registries_1.polkadotRegistry.createType('Block', block789629);
            mockBlock789629BadExt.extrinsics.pop();
            mockBlock789629BadExt.extrinsics.unshift(undefined);
            mock_1.mockApi.rpc.chain.getBlock = (() => Promise.resolve().then(() => {
                return {
                    block: mockBlock789629BadExt,
                };
            }));
            await expect(blocksService.fetchBlock(mock_1.blockHash789629, false, false)).rejects.toThrow(new Error(`Cannot destructure property 'method' of 'extrinsic' as it is undefined.`));
            mock_1.mockApi.rpc.chain.getBlock = mock_1.getBlock;
        });
    });
    describe('createCalcFee & calc_fee', () => {
        it('calculates partialFee for proxy.proxy in polkadot block 789629', async () => {
            // tx hash: 0x6d6c0e955650e689b14fb472daf14d2bdced258c748ded1d6cb0da3bfcc5854f
            const { calcFee } = await blocksService['createCalcFee'](mock_1.mockApi, '0xParentHash', mock_1.mockBlock789629);
            expect(calcFee === null || calcFee === void 0 ? void 0 : calcFee.calc_fee(BigInt(399480000), 534)).toBe('544000000');
        });
        it('calculates partialFee for utility.batch in polkadot block 789629', async () => {
            // tx hash: 0xc96b4d442014fae60c932ea50cba30bf7dea3233f59d1fe98c6f6f85bfd51045
            const { calcFee } = await blocksService['createCalcFee'](mock_1.mockApi, '0xParentHash', mock_1.mockBlock789629);
            expect(calcFee === null || calcFee === void 0 ? void 0 : calcFee.calc_fee(BigInt(941325000000), 1247)).toBe('1257000075');
        });
    });
    describe('BlocksService.parseGenericCall', () => {
        const transfer = createCall_1.createCall('balances', 'transfer', {
            value: 12,
            dest: registries_1.kusamaRegistry.createType('AccountId', '14E5nqKAp3oAJcmzgZhUD2RcptBeUBScxKHgJKU4HPNcKVf3'),
        });
        const transferOutput = {
            method: {
                pallet: 'balances',
                method: 'transfer',
            },
            args: {
                dest: '5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty',
                value: 12,
            },
        };
        it('does not handle an empty object', () => expect(() => blocksService['parseGenericCall']({}, mock_1.mockBlock789629.registry)).toThrow());
        it('parses a simple balances.transfer', () => {
            expect(JSON.stringify(blocksService['parseGenericCall'](transfer, mock_1.mockBlock789629.registry))).toBe(JSON.stringify(transferOutput));
        });
        it('parses utility.batch nested 4 deep', () => {
            const batch1 = createCall_1.createCall('utility', 'batch', {
                calls: [transfer],
            });
            const batch2 = createCall_1.createCall('utility', 'batch', {
                calls: [batch1, transfer],
            });
            const batch3 = createCall_1.createCall('utility', 'batch', {
                calls: [batch2, transfer],
            });
            const batch4 = createCall_1.createCall('utility', 'batch', {
                calls: [batch3, transfer],
            });
            const baseBatch = {
                method: {
                    pallet: 'utility',
                    method: 'batch',
                },
                args: {
                    calls: [],
                },
            };
            expect(JSON.stringify(blocksService['parseGenericCall'](batch4, mock_1.mockBlock789629.registry))).toBe(JSON.stringify(Object.assign(Object.assign({}, baseBatch), { args: {
                    calls: [
                        Object.assign(Object.assign({}, baseBatch), { args: {
                                calls: [
                                    Object.assign(Object.assign({}, baseBatch), { args: {
                                            calls: [
                                                Object.assign(Object.assign({}, baseBatch), { args: {
                                                        calls: [
                                                            transferOutput,
                                                        ],
                                                    } }),
                                                transferOutput,
                                            ],
                                        } }),
                                    transferOutput,
                                ],
                            } }),
                        transferOutput,
                    ],
                } })));
        });
        it('handles a batch sudo proxy transfer', () => {
            const proxy = createCall_1.createCall('proxy', 'proxy', {
                forceProxyType: 'Any',
                call: transfer,
            });
            const sudo = createCall_1.createCall('sudo', 'sudo', {
                call: proxy,
            });
            const batch = createCall_1.createCall('utility', 'batch', {
                calls: [sudo, sudo, sudo],
            });
            const sudoOutput = {
                method: {
                    pallet: 'sudo',
                    method: 'sudo',
                },
                args: {
                    call: {
                        method: {
                            pallet: 'proxy',
                            method: 'proxy',
                        },
                        args: {
                            real: '5C4hrfjw9DjXZTzV3MwzrrAr9P1MJhSrvWGWqi1eSuyUpnhM',
                            force_proxy_type: 'Any',
                            call: transferOutput,
                        },
                    },
                },
            };
            expect(JSON.stringify(blocksService['parseGenericCall'](batch, mock_1.mockBlock789629.registry))).toEqual(JSON.stringify({
                method: {
                    pallet: 'utility',
                    method: 'batch',
                },
                args: {
                    calls: [sudoOutput, sudoOutput, sudoOutput],
                },
            }));
        });
    });
});
//# sourceMappingURL=BlocksService.spec.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
const http_errors_1 = require("http-errors");
const sanitizeNumbers_1 = require("../../sanitize/sanitizeNumbers");
const registries_1 = require("../../test-helpers/registries");
const mock_1 = require("../test-helpers/mock");
const palletsStakingProgress789629SResponse = require("../test-helpers/responses/pallets/stakingProgress789629.json");
const PalletsStakingProgressService_1 = require("./PalletsStakingProgressService");
/**
 * Mock PalletStakingProgressService instance.
 */
const palletStakingProgressService = new PalletsStakingProgressService_1.PalletsStakingProgressService(mock_1.mockApi);
describe('PalletStakingProgressService', () => {
    describe('derivePalletStakingProgress', () => {
        it('works when ApiPromise works (block 789629)', async () => {
            expect(sanitizeNumbers_1.sanitizeNumbers(await palletStakingProgressService.derivePalletStakingProgress(mock_1.blockHash789629))).toStrictEqual(palletsStakingProgress789629SResponse);
        });
        it('throws when ErasStartSessionIndex.isNone', async () => {
            mock_1.mockApi.query.staking.erasStartSessionIndex.at = () => Promise.resolve().then(() => registries_1.polkadotRegistry.createType('Option<SessionIndex>', null));
            await expect(palletStakingProgressService.derivePalletStakingProgress(mock_1.blockHash789629)).rejects.toStrictEqual(new http_errors_1.InternalServerError('EraStartSessionIndex is None when Some was expected.'));
            mock_1.mockApi.query.staking
                .erasStartSessionIndex.at = mock_1.erasStartSessionIndexAt;
        });
        it('throws when activeEra.isNone', async () => {
            mock_1.mockApi.query.staking.activeEra.at = () => Promise.resolve().then(() => registries_1.polkadotRegistry.createType('Option<ActiveEraInfo>', null));
            await expect(palletStakingProgressService.derivePalletStakingProgress(mock_1.blockHash789629)).rejects.toStrictEqual(new http_errors_1.InternalServerError('ActiveEra is None when Some was expected.'));
            mock_1.mockApi.query.staking.activeEra.at = mock_1.activeEraAt;
        });
    });
});
//# sourceMappingURL=PalletsStakingProgressService.spec.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Config = void 0;
const confmgr_1 = require("confmgr");
const configTypes = require("../config/types.json");
const Specs_1 = require("./Specs");
const config_1 = require("./types/config");
function hr() {
    return Array(80).fill('‚îÅ').join('');
}
/**
 * Access a singleton config object that will be intialized on first use.
 */
class Config {
    /**
     * Gather env vars for config and make sure they are valid.
     */
    static create() {
        // Instantiate ConfigManager which is used to read in the specs.yml
        const config = confmgr_1.ConfigManager.getInstance(Specs_1.Specs.specs).getConfig();
        if (!config.Validate()) {
            config.Print({ compact: false });
            console.log('Invalid config, we expect something like:');
            console.log(hr());
            console.log(config.GenEnv().join('\n'));
            console.log(hr());
            console.log('You may copy the snippet above in a .env.foobar file, then use it with:');
            console.log('    NODE_ENV=foobar yarn start\n');
            console.log('Invalid config, exiting...');
            process.exit(1);
        }
        else {
            config.Print({ compact: true });
        }
        this._config = {
            EXPRESS: {
                HOST: config.Get(config_1.MODULES.EXPRESS, config_1.CONFIG.BIND_HOST),
                PORT: config.Get(config_1.MODULES.EXPRESS, config_1.CONFIG.PORT),
            },
            SUBSTRATE: {
                WS_URL: config.Get(config_1.MODULES.SUBSTRATE, config_1.CONFIG.WS_URL),
                CUSTOM_TYPES: configTypes[config_1.CONFIG.CUSTOM_TYPES],
            },
            LOG: {
                LEVEL: config.Get(config_1.MODULES.LOG, config_1.CONFIG.LEVEL),
                JSON: config.Get(config_1.MODULES.LOG, config_1.CONFIG.JSON),
                FILTER_RPC: config.Get(config_1.MODULES.LOG, config_1.CONFIG.FILTER_RPC),
                STRIP_ANSI: config.Get(config_1.MODULES.LOG, config_1.CONFIG.STRIP_ANSI),
            },
        };
        return this._config;
    }
    /**
     * Sidecar's configuaration.
     */
    static get config() {
        return this._config || this.create();
    }
}
exports.Config = Config;
//# sourceMappingURL=Config.js.map
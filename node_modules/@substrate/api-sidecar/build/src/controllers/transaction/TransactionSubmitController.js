"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const services_1 = require("../../services");
const AbstractController_1 = require("../AbstractController");
/**
 * POST a serialized transaction to submit to the transaction queue.
 *
 * Post info:
 * - `data`: Expects a hex-encoded transaction, e.g. '{"tx": "0x..."}'.
 * - `headers`: Expects 'Content-Type: application/json'.
 *
 * Returns:
 * - Success:
 *   - `hash`: The hash of the encoded transaction.
 * - Failure:
 *   - `error`: 'Failed to parse transaction' or 'Failed to submit transaction'. In the case of the former,
 *     Sidecar was unable to parse the transaction and never submitted it to the client. In
 *     the case of the latter, the transaction queue rejected the transaction.
 *   - `extrinsic`: The hex-encoded extrinsic. Only present if Sidecar fails to parse a transaction.
 *   - `cause`: The error message from parsing or from the client.
 */
class TransactionSubmitController extends AbstractController_1.default {
    constructor(api) {
        super(api, '/transaction', new services_1.TransactionSubmitService(api));
        /**
         * Submit a serialized transaction to the transaction queue.
         *
         * @param req Sidecar TxRequest
         * @param res Express Response
         */
        this.txSubmit = async ({ body: { tx } }, res) => {
            if (!tx) {
                throw {
                    error: 'Missing field `tx` on request body.',
                };
            }
            res.send(await this.service.submitTransaction(tx));
        };
        this.initRoutes();
    }
    initRoutes() {
        this.router.post(this.path, TransactionSubmitController.catchWrap(this.txSubmit));
    }
}
exports.default = TransactionSubmitController;
//# sourceMappingURL=TransactionSubmitController.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const services_1 = require("../../services");
const AbstractController_1 = require("../AbstractController");
/**
 * GET the chain's metadata.
 *
 * Query:
 * - (Optional) `at`: Block hash or height at which to query. If not provided, queries
 *   finalized head.
 *
 * Returns:
 * - Metadata object.
 *
 * Substrate Reference:
 * - FRAME Support: https://crates.parity.io/frame_support/metadata/index.html
 * - Knowledge Base: https://substrate.dev/docs/en/knowledgebase/runtime/metadata
 */
class RuntimeMetadataController extends AbstractController_1.default {
    constructor(api) {
        super(api, '/runtime/metadata', new services_1.RuntimeMetadataService(api));
        /**
         * Get the chain's latest metadata in a decoded, JSON format.
         *
         * @param _req Express Request
         * @param res Express Response
         */
        this.getMetadata = async ({ query: { at } }, res) => {
            const hash = await this.getHashFromAt(at);
            RuntimeMetadataController.sanitizedSend(res, await this.service.fetchMetadata(hash));
        };
        this.initRoutes();
    }
    initRoutes() {
        this.safeMountAsyncGetHandlers([['', this.getMetadata]]);
    }
}
exports.default = RuntimeMetadataController;
//# sourceMappingURL=RuntimeMetadataController.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("@polkadot/util");
const services_1 = require("../../services");
const AbstractController_1 = require("../AbstractController");
/**
 * `/pallets/{palletId}/storage/{storageItemId}`
 *
 * Returns the value stored under the storageItemId. If it is a
 * map, query param key1 is required. If the storage item is double map
 * query params key1 and key2 are required.
 *
 * See `docs/src/openapi-v1.yaml` for usage information.
 */
class PalletsStorageItemController extends AbstractController_1.default {
    constructor(api) {
        super(api, '/pallets/:palletId/storage', new services_1.PalletsStorageItemService(api));
        this.getStorageItem = async ({ query: { at, key1, key2, metadata }, params: { palletId, storageItemId }, }, res) => {
            const key1Arg = typeof key1 === 'string' ? key1 : undefined;
            const key2Arg = typeof key2 === 'string' ? key2 : undefined;
            const metadataArg = metadata === 'true' ? true : false;
            const hash = await this.getHashFromAt(at);
            PalletsStorageItemController.sanitizedSend(res, await this.service.fetchStorageItem({
                hash,
                // stringCamelCase ensures we don't have snake case or kebab case
                palletId: util_1.stringCamelCase(palletId),
                storageItemId: util_1.stringCamelCase(storageItemId),
                key1: key1Arg,
                key2: key2Arg,
                metadata: metadataArg,
            }));
        };
        this.initRoutes();
    }
    initRoutes() {
        // TODO look into middleware validation of in path IDs. https://github.com/paritytech/substrate-api-sidecar/issues/281
        this.safeMountAsyncGetHandlers([
            ['/:storageItemId', this.getStorageItem],
        ]);
    }
}
exports.default = PalletsStorageItemController;
//# sourceMappingURL=PalletsStorageItemController.js.map
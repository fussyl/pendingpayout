"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const services_1 = require("../../services");
const AbstractController_1 = require("../AbstractController");
/**
 * GET information about the Substrate node's activity in the peer-to-peer network.
 *
 * Returns:
 * - `nodeRoles`: Roles the node is running.
 * - `numPeers`: Number of peers the node is connected to.
 * - `isSyncing`: Whether or not the node is syncing. `False` indicates that the
 * 		node is in sync.
 * - `shouldHavePeers`: Whether or not the node should be connected to peers. Might
 * 		be false for local chains or when running without discovery.
 * - `localPeerId`: Local copy of the `PeerId`.
 * - `localListenAddresses`: Multiaddresses that the local node is listening on.
 * 		The addresses include a trailing `/p2p/` with the local PeerId, and are thus
 * 		suitable to be passed to `system_addReservedPeer` or as a bootnode address
 * 		for example.
 * - `systemPeers`: array of
 * 		- `peerId`: Peer ID.
 *		- `roles`: Roles the peer is running.
 *		- `protocolVersion`: Peer's protocol version.
 *		- `bestHash`: Hash of the best block on the peers canon chain.
 *		- `bestNumber`: Height of the best block on the peers canon chain.
 *
 * References:
 * - `NodeRole`: https://github.com/paritytech/substrate/blob/master/client/rpc-api/src/system/helpers.rs#L80
 */
class NodeNetworkController extends AbstractController_1.default {
    constructor(api) {
        super(api, '/node/network', new services_1.NodeNetworkService(api));
        /**
         * GET information about the Substrate node's activity in the peer-to-peer network.
         *
         * @param _req Express Request
         * @param res Express Response
         */
        this.getNodeNetworking = async (_req, res) => {
            NodeNetworkController.sanitizedSend(res, await this.service.fetchNetwork());
        };
        this.initRoutes();
    }
    initRoutes() {
        this.safeMountAsyncGetHandlers([['', this.getNodeNetworking]]);
    }
}
exports.default = NodeNetworkController;
//# sourceMappingURL=NodeNetworkController.js.map